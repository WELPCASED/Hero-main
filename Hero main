-- Create the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false -- Ensures it stays after respawn
screenGui.Parent = game:GetService("CoreGui") -- Parent to CoreGui for persistent visibility

-- Create a frame to hold the GUI
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0.5, 0, 0.6, 0) -- Increased height to 60%
mainFrame.Position = UDim2.new(0.25, 0, 0.2, 0) -- Centered in the middle of the screen
mainFrame.BackgroundTransparency = 0.5 -- Semi-transparent
mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black color
mainFrame.Parent = screenGui

-- Create the "Main" button with reduced height
local mainButton = Instance.new("TextButton")
mainButton.Size = UDim2.new(0, 80, 0, 30) -- Shorter height (30)
mainButton.Position = UDim2.new(0, 10, 0, 10) -- Position it in the top left corner of the frame
mainButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Same color as the GUI (black)
mainButton.BackgroundTransparency = 0.5 -- Semi-transparent
mainButton.Text = "Main" -- Button text
mainButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
mainButton.Parent = mainFrame

-- Create the "Target Nearest Player" toggle button (initially hidden)
local targetNearestButton = Instance.new("TextButton")
targetNearestButton.Size = UDim2.new(0, 80, 0, 30) -- Same size as Main button
targetNearestButton.Position = UDim2.new(0, 10, 0, 60) -- Positioned 50 pixels below Main button
targetNearestButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Same color as the GUI (black)
targetNearestButton.BackgroundTransparency = 0.5 -- Semi-transparent
targetNearestButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
targetNearestButton.TextScaled = true -- Scale text to fit within button
targetNearestButton.TextSize = 14 -- Set a default text size
targetNearestButton.Parent = mainFrame
targetNearestButton.Visible = false -- Initially hidden
targetNearestButton.Text = "Target Nearest Player Off" -- Default text

-- Create the "Aimlock" toggle button next to the Target Nearest Player button
local aimlockButton = Instance.new("TextButton")
aimlockButton.Size = UDim2.new(0, 80, 0, 30) -- Same size as other buttons
aimlockButton.Position = UDim2.new(0, 100, 0, 60) -- Positioned next to Target Nearest Player button
aimlockButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Same color as the GUI (black)
aimlockButton.BackgroundTransparency = 0.5 -- Semi-transparent
aimlockButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
aimlockButton.Text = "Aimlock Off" -- Default text
aimlockButton.Parent = mainFrame

-- Variable to track the state of the aimlock button
local aimlockState = false

-- Services and local player setup
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Function to get the nearest player
local function getNearestPlayer()
    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

-- Function to handle toggle state for the aimlock button
local function onAimlockButtonClick()
    aimlockState = not aimlockState -- Toggle state
    if aimlockState then
        aimlockButton.Text = "Aimlock On" -- Set text to On

        -- Continuously update the camera to follow the nearest player
        RunService.RenderStepped:Connect(function()
            if aimlockState then
                local nearestPlayer = getNearestPlayer()
                if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    camera.CFrame = CFrame.new(camera.CFrame.Position, nearestPlayer.Character.HumanoidRootPart.Position)
                end
            end
        end)
    else
        aimlockButton.Text = "Aimlock Off" -- Set text to Off
        -- To stop following, you might want to disconnect the RenderStepped connection.
        -- However, this example does not handle disconnecting directly.
    end
end

-- Create the "Player Name" text box
local playerNameTextBox = Instance.new("TextBox")
playerNameTextBox.Size = UDim2.new(0, 70, 0, 25) -- Shorter height than the button (25)
playerNameTextBox.Position = UDim2.new(0, 10, 0, 105) -- Positioned 45 pixels below the Target Nearest Player button (60 + 45)
playerNameTextBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Same color as the GUI (black)
playerNameTextBox.BackgroundTransparency = 0.5 -- Semi-transparent
playerNameTextBox.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
playerNameTextBox.TextScaled = true -- Scale text to fit within the text box
playerNameTextBox.TextSize = 14 -- Set a default text size
playerNameTextBox.Parent = mainFrame
playerNameTextBox.Visible = false -- Initially hidden

-- Create the new toggle button (part of the main button)
local newToggleButton = Instance.new("TextButton")
newToggleButton.Size = UDim2.new(0, 35, 0, 25) -- Half the width of the Player Name text box and same height
newToggleButton.Position = UDim2.new(0, 10, 0, 130) -- Positioned directly below the Player Name text box (105 + 25)
newToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Same color as the GUI (black)
newToggleButton.BackgroundTransparency = 0.5 -- Semi-transparent
newToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
newToggleButton.TextScaled = true -- Scale text to fit within button
newToggleButton.TextSize = 14 -- Set a default text size
newToggleButton.Parent = mainFrame
newToggleButton.Text = "Off" -- Default text set to Off
newToggleButton.Visible = false

-- Variable to track the state of the new toggle button
local newToggleState = false

-- Variable to control following a specific player
local followingPlayer = false
local followingPlayerName = ""

-- TweenService setup
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Function to follow a specific player based on the username in the text box
local function followSpecificPlayer(playerName)
    local player = game.Players.LocalPlayer
    local targetPlayer = game.Players:FindFirstChild(playerName)

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position - targetPlayer.Character.HumanoidRootPart.CFrame.LookVector * 5

        -- Create a tween to follow the player
        local goal = {CFrame = CFrame.new(targetPosition)}
        local tweenInfo = TweenInfo.new((targetPosition - player.Character.HumanoidRootPart.Position).Magnitude / 1000, Enum.EasingStyle.Linear) -- Updated speed
        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, goal)
        tween:Play()

        tween.Completed:Wait() -- Wait for the tween to finish

        -- Continue following if still toggled on
        if followingPlayer then
            followSpecificPlayer(playerName)
        end
    end
end

-- Function to handle toggle state for the new button
local function onNewToggleButtonClick()
    newToggleState = not newToggleState -- Toggle state
    if newToggleState then
        newToggleButton.Text = "On" -- Set text to On
        followingPlayerName = playerNameTextBox.Text -- Get the username from the text box
        if game.Players:FindFirstChild(followingPlayerName) then
            followingPlayer = true
            followSpecificPlayer(followingPlayerName) -- Start following the specified player
        else
            print("Player not found: " .. followingPlayerName) -- Optional error message
        end
    else
        newToggleButton.Text = "Off" -- Set text to Off
        followingPlayer = false -- Stop following
    end
end

-- Function to follow the nearest player
local function followNearestPlayer()
    local player = game.Players.LocalPlayer
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, p in ipairs(game.Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = p
            end
        end
    end

    if closestPlayer then
        local targetPosition = closestPlayer.Character.HumanoidRootPart.Position - closestPlayer.Character.HumanoidRootPart.CFrame.LookVector * 5
        player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)

        -- Create a tween to follow the player
        local goal = {CFrame = CFrame.new(targetPosition)}
        local tweenInfo = TweenInfo.new(closestDistance / 1000, Enum.EasingStyle.Linear) -- Updated speed
        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, goal)
        tween:Play()

        tween.Completed:Wait() -- Wait for the tween to finish
        -- Repeat following the player if still toggled on
        if followingPlayer then
            followNearestPlayer()
        end
    end
end

-- Create a smooth player list system inside the text box
local playerListFrame = Instance.new("ScrollingFrame")
playerListFrame.Size = UDim2.new(0, 120, 0, 150) -- Adjust size as needed
playerListFrame.Position = UDim2.new(0, 85, 0, 105) -- Positioned relative to text box
playerListFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
playerListFrame.BackgroundTransparency = 0.5 -- Semi-transparent
playerListFrame.ScrollBarThickness = 6
playerListFrame.Visible = false -- Initially hidden
playerListFrame.Parent = mainFrame

-- Add a UIListLayout to the scrolling frame for smooth arrangement of buttons
local listLayout = Instance.new("UIListLayout")
listLayout.Parent = playerListFrame
listLayout.SortOrder = Enum.SortOrder.LayoutOrder -- Arrange the buttons in order
listLayout.Padding = UDim.new(0, 5) -- Add some padding between buttons

-- Function to populate the player list
local function populatePlayerList()
    for _, child in ipairs(playerListFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy() -- Clear previous entries
        end
    end
    playerListFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Reset size

    for _, player in ipairs(game.Players:GetPlayers()) do
        local playerButton = Instance.new("TextButton")
        playerButton.Size = UDim2.new(1, -10, 0, 25) -- Make the buttons fit the scrolling frame width
        playerButton.BackgroundTransparency = 0.5
        playerButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerButton.Text = player.Name
        playerButton.Parent = playerListFrame

        playerButton.MouseButton1Click:Connect(function()
            playerNameTextBox.Text = player.Name -- Set the selected player's name in the text box
            playerListFrame.Visible = false -- Hide the player list after selection
        end)

        -- Adjust the CanvasSize of the scrolling frame to fit all buttons
        playerListFrame.CanvasSize = UDim2.new(0, 0, 0, playerListFrame.CanvasSize.Y.Offset + playerButton.Size.Y.Offset + 5)
    end
end

-- Function to toggle visibility of Target Nearest Player button, Player Name text box, and Player List
local function toggleMainButtonVisibility()
    local isVisible = not targetNearestButton.Visible -- Toggle visibility state

    -- Toggle visibility of buttons and text box
    targetNearestButton.Visible = isVisible
    playerNameTextBox.Visible = isVisible
    newToggleButton.Visible = isVisible
    aimlockButton.Visible = isVisible -- Toggle Aimlock button visibility

    -- Toggle player list visibility based on text box click
    playerNameTextBox.Focused:Connect(function()
        playerListFrame.Visible = true
        populatePlayerList() -- Populate the player list when text box is clicked
    end)
end

-- Bind the function to the Main button click
mainButton.MouseButton1Click:Connect(toggleMainButtonVisibility)

-- Bind the function to the new toggle button click
newToggleButton.MouseButton1Click:Connect(onNewToggleButtonClick)

-- Toggle state for following the nearest player
local function onNearestPlayerButtonClick()
    followingPlayer = not followingPlayer -- Toggle the following state
    if followingPlayer then
        targetNearestButton.Text = "Target Nearest Player On" -- Change text to On
        followNearestPlayer() -- Start following the nearest player
    else
        targetNearestButton.Text = "Target Nearest Player Off" -- Change text to Off
    end
end

-- Bind the function to the Target Nearest Player button click
targetNearestButton.MouseButton1Click:Connect(onNearestPlayerButtonClick)

-- Bind the function to the Aimlock button click
aimlockButton.MouseButton1Click:Connect(onAimlockButtonClick)

-- Variable to track the last followed player name
local lastFollowedPlayerName = ""

-- Function to check the player name in the text box continuously
local function monitorPlayerName()
    while true do
        wait(1) -- Check every second
        local currentPlayerName = playerNameTextBox.Text
        if currentPlayerName ~= lastFollowedPlayerName then
            lastFollowedPlayerName = currentPlayerName
            if followingPlayer then
                followingPlayer = false -- Stop following before starting again
                newToggleButton.Text = "Off" -- Update button text
                followSpecificPlayer(currentPlayerName) -- Follow the new player
            end
        end
    end
end

-- Start monitoring player name in a separate thread
spawn(monitorPlayerName)
